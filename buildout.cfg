[buildout]
# Call your project any (legal python) name you like
# and which Pinax project you want to base it on:
# * basic_project
# * intranet_project
# * private_beta_project
# * social_project
# * temp_group_project
# If you have your own project brought in to this hierarchy
# (e.g., via svn) then the clone copying will not be done
# and your project will not be overwritten.

MYPROJECT_NAME		= mysite
MYPROJECT_BASE		= social_project

# Hopefully you shouldn't need to change much below this
# unless you know what you're doing: adding parts, eggs, libraries, etc.

PINAX_DIR		= pinax

#download-cache		= download-cache
versions		= versions
#allow-picked-versions	= false
find-links		= http://pypi.pinaxproject.com/

parts	=
	clone_project
	zlib
	PIL
	django_openid
	diff_match_patch
	interpreter
	pinax
	
eggs =
        PIL
	ipython
	django-notification

# via git and recipes: should be able to get from pypi.pinaxproject.com now
        django-openid
	diff-match-patch

# reg eggs
	django-email-confirmation
	django-extensions
	django-friends
	django-mailer
	django-oembed
	django-db-log
	django-threadedcomments
	django-wikiapp==0.1.2
	django-tagging
	django-swaps
	django-timezones
	django-app-plugins
	django-voting
	django-bookmarks
        django-flag
        django-atomformat
	django-locations
	django-uni-form

     django-ajax-validation
     django-announcements
     django-avatar
     django-dbtemplates
     django-microblogging
#MUST FORCE trunk -- see 'svn*' section
#    django-notification
     django-pagination
     django-robots
     django-messages
     django-photologue
#NO SETUP.PY     django-wikiapp
     Creoleparser
     python-dateutil
     docutils
     elementtree
     feedparser
     gdata
     Pygments
     python-openid
     python-twitter
     python-yadis
     pytz==2009a
     simplejson
     textile
     vobject
     BeautifulSoup

# I can't get these as eggs:
# - django-openid


### MAYBE I WANNA COPY pinax/projects/social_project to ./myproject
### then build that?


[versions]
setuptools		= 0.6c9
zc.buildout		= 1.2.1
zc.recipe.egg		= 1.1.0
#djangorecipe		= 0.15.2
PIL			= 1.1.6
#iw.recipe.subversion	= 0.3.1
#hexagonit.recipe.cmmi	= 1.1.1
#hexagonit.recipe.download = 1.2.1
#pysqlite		= 2.5.1
#
#django-wikiapp = 0.1.2
pytz = 2009a
# FIXED IN TRUNK
# versionless finds issue #27 syntax about 'finally' in 0.1.2
#django-notification = 0.1.1
django = 1.0.2

[clone_project]
recipe	= iw.recipe.cmd:py
on_install = true
on_update = true
cmds =
  >>> dst_dir = os.path.join(os.getcwd(), "${buildout:MYPROJECT_NAME}")
  >>> if os.path.exists(dst_dir):
  ...     print "WARNING: dst dir=%s exists, not overwriting" % dst_dir
  ... else:
  ...     pinax_project_dir = os.path.join(os.getcwd(), "pinax", "projects", "${buildout:MYPROJECT_BASE}")
  ...     print "INFO: cloning pinax project=%s to dir=%s" % (pinax_project_dir, dst_dir)
  ...     if os.path.isdir(pinax_project_dir):
  ...         shutil.copytree(pinax_project_dir, dst_dir)
  ...     else:
  ...         raise RuntimeError, "Nonexistend project=%s at dir=%s" % (${buildout:MYPROJECT_BASE}, pinax_project_dir)
	
# Build zlib for PIL, and PIL so we don't rely on something in the system

[zlib]
recipe			= hexagonit.recipe.cmmi
url			= http://www.zlib.net/zlib-1.2.3.tar.gz
configure-options	= --shared

[PIL]
recipe		= zc.recipe.egg:custom
egg		= PIL
find-links	= http://dist.repoze.org/
include-dirs	= ${zlib:location}/include
library-dirs	= ${zlib:location}/lib
rpath		= ${zlib:location}/lib

# Build a python interpreter which gets our eggs on its sys.path

[interpreter]
recipe		= zc.recipe.egg
eggs		= ${buildout:eggs}
#extra-paths	= ${zope2:location}/lib/python
interpreter	= pypinax
scripts		= pypinax

[django_openid]
recipe=zerokspot.recipe.git
repository=git://github.com/brosner/django-openid.git
as_egg=True

[diff_match_patch]
recipe=zerokspot.recipe.git
repository=git://github.com/pinax/diff-match-patch.git
as_egg=True

[pinax]
recipe	= djangorecipe
version = 1.0.2
settings = settings
eggs	= ${buildout:eggs}
	  PIL
extra-paths = ${buildout:MYPROJECT_NAME}/apps
	      ${buildout:PINAX_DIR}/apps
project	= ${buildout:MYPROJECT_NAME}
#
# how do we tell it our testsettings.py file?
test = ${buildout:MYPROJECT_NAME}
#

