.. _ref-customization:

Customization
=============

As more sites are built using Pinax, more best practices will emerge, but for
now what we recommend is:

- Always work off a stable release. The most current release is 0.7b
- Select and copy your project:
    * The manual method:
        - Choose which :ref:`project <ref-project>` you would like to use as a starting 
          point.
        - Copy that project into the ``pinax/projects`` directory.
    * The automated method:
        - Utilize the pinax-admin :ref:`clone_project <cloneproject>` utility.
- Make necessary changes to the ``settings.py`` and ``urls.py`` files in your
  copied directory.
- Ensure ``PINAX_ROOT`` is setup correctly in your settings. It should point
  to where Pinax lives on your filesystem.
- Change the domain and display name of the Site in the admin interface. 
- Develop your custom apps under your new project or anywhere on Python path.
- Develop your own templates under your new project.

.. _ref-project:


Choosing a Project
------------------

By default, Pinax provides six projects to use as a starting point for 
customization.  Depending on your development style, you may prefer one project 
over the other.

basic_project
    This project comes with the bare minimum set of applications and templates to
    get you started. It includes no extra tabs, only the profile and notices tabs are
    included by default. From here you can add any extra functionality and
    applications that you would like.

intranet_project
    This is mostly just a test project at the moment, but is derived from a
    project designed for intranet use.

private_beta_project
    This project comes with the bare minimum set of applications and templates to
    get you started. It includes no extra tabs, only the profile and notices tabs are
    included by default. From here you can add any extra functionality and
    applications that you would like.

social_project
    This project comes fully-featured, with everything that Pinax provides enabled
    by default. It provides all tabs available, etc. From here you can remove
    applications that you do not want to use, and add your own applications as well.

temp_group_project
    This project is a temporary project for implementing the new group-related
    apps.

temp_schedule_project
    This project comes with the bare minimum set of applications and templates to
    get you started. It includes no extra tabs only the profile and notices tabs are
    included by default. From here you can add any extra functionality and
    applications that you would like.    
    
.. _ref-cloneproject:

pinax-admin clone_project
--------------------------

Pinax provides you with pinax-admin, a command line utility. With pinax-admin
you can quickly generate a cloned project. For example, if you wanted to clone
the basic_project you could simply do the following.

1. First we get the pinax project directory::

    (venv)$ pinax-admin clone_project -r
    </path/to/the/pinax/projects/>

2. We go to that directory::

    (venv)$ cd </path/to/the/pinax/projects/>

3. Now we create the new project::

    (venv)$ pinax-admin clone_project basic_project my_new_project



Settings You Will (Probably) Want To Override
---------------------------------------------

- ``PINAX_ROOT``
- ``PINAX_THEME``
- ``DEBUG``
- ``TEMPLATE_DEBUG``
- ``LOGGING_OUTPUT_ENABLED``
- ``ADMINS``
- ``MANAGERS``
- ``DATABASE_ENGINE``
- ``DATABASE_NAME``
- ``DATABASE_USER``
- ``DATABASE_PASSWORD``
- ``DATABASE_HOST``
- ``DATABASE_PORT``
- ``TIME_ZONE``
- ``SECRET_KEY``
- ``DEFAULT_FROM_EMAIL``
- ``SERVER_EMAIL``
- ``MAILER_PAUSE_SEND``
- ``SEND_BROKEN_LINK_EMAILS``
- ``EMAIL_HOST``
- ``EMAIL_PORT``
- ``EMAIL_HOST_USER``
- ``EMAIL_HOST_PASSWORD``
- ``EMAIL_SUBJECT_PREFIX``
- ``EMAIL_DEBUG``
- ``CONTACT_EMAIL``
- ``URCHIN_ID``
- ``BBAUTH_APP_ID``
- ``BBAUTH_SHARED_SECRET``
- ``SITE_NAME``

All but ``MAILER_PAUSE_SEND``, ``CONTACT_EMAIL``, ``URCHIN_ID``,
``BBAUTH_APP_ID``, ``BBAUTH_SHARED_SECRET`` and ``SITE_NAME`` are just the
standard Django settings.


``base.html`` versus ``site_base.html``
---------------------------------------

In the sample projects, ``templates/base.html`` is intended for overall page structure
whereas ``templates/site_base.html`` is intended for adding site-specific content that
is to be found on all pages (things like logo, navigation or footers).

If you are writing a theme to be used across multiple sites, you should modify
``base.html``, not ``site_base.html``. If you want to keep a particular theme
but modify content for a specific site, you should modify ``site_base.html``.


Adding Tabs
-----------

See :ref:`ref-tabs`